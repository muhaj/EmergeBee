/**
 * SPECTACLE MVP - 8TH WALL INTEGRATION
 * Complete integration guide with code files
 */

// ============================================
// 1. SETUP & CONFIGURATION
// ============================================

/**
 * Step 1: Sign up for 8th Wall Developer Account
 * - Go to: https://console.8thwall.com/
 * - Create free account (no credit card required for dev mode)
 * - Create a new project: "Spectacle AR Demo"
 * - Get your App Key from project settings
 */

// Environment Variables (.env)
const ENV_EXAMPLE = `
# 8th Wall
VITE_8THWALL_APP_KEY=YOUR_APP_KEY_HERE
VITE_AR_BASE_URL=https://your-domain.com/ar

# Existing vars...
ALGO_NETWORK=testnet
API_BASE_URL=http://localhost:8787
EVENT_ENGINE_APP_ID=
POINTS_ASA_ID=
`;

// ============================================
// 2. UPDATED ASTRO CONFIG
// ============================================

// astro.config.mjs
export default {
  integrations: [
    react(),
    // 8th Wall requires specific headers
  ],
  vite: {
    define: {
      'process.env.VITE_8THWALL_APP_KEY': JSON.stringify(process.env.VITE_8THWALL_APP_KEY)
    }
  },
  server: {
    headers: {
      // Required for 8th Wall camera access
      'Permissions-Policy': 'camera=(self), microphone=(self), geolocation=(self)',
    }
  }
};

// ============================================
// 3. UPDATED AR GAME COMPONENT (8th Wall)
// ============================================

// apps/web-astro/src/components/ARGame8thWall.tsx
import { useEffect, useRef, useState } from 'react';

interface ARGame8thWallProps {
  eventId: number;
  zone?: string;
  onScoreSubmit: (score: number) => void;
}

export default function ARGame8thWall({ eventId, zone, onScoreSubmit }: ARGame8thWallProps) {
  const [score, setScore] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [timeLeft, setTimeLeft] = useState(30);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [xrReady, setXrReady] = useState(false);

  useEffect(() => {
    // Load 8th Wall SDK
    const script = document.createElement('script');
    script.src = '//cdn.8thwall.com/web/xrextras/xrextras.js';
    script.async = true;
    document.head.appendChild(script);

    script.onload = () => {
      const xrScript = document.createElement('script');
      xrScript.src = `//apps.8thwall.com/xrweb?appKey=${import.meta.env.VITE_8THWALL_APP_KEY}`;
      xrScript.async = true;
      document.head.appendChild(xrScript);

      xrScript.onload = () => {
        setXrReady(true);
        initializeARScene();
      };
    };

    return () => {
      // Cleanup
      if (window.XR8) {
        window.XR8.stop();
      }
    };
  }, []);

  const initializeARScene = () => {
    if (!window.XR8 || !window.XRExtras) return;

    // 8th Wall Pipeline Configuration
    window.XR8.addCameraPipelineModules([
      // Loading screen
      window.XRExtras.Loading.pipelineModule(),
      
      // Runtime errors
      window.XRExtras.RuntimeError.pipelineModule(),
      
      // Custom game logic module
      {
        name: 'spectacle-tap-game',
        
        onStart: ({ canvas, canvasWidth, canvasHeight }) => {
          console.log('AR Session started!');
          const { scene, camera, renderer } = window.XR8.Threejs.xrScene();
          
          // Create game targets
          createTapTargets(scene);
          
          // Add tap handler
          canvas.addEventListener('touchstart', handleTap);
        },
        
        onUpdate: () => {
          // Game loop updates happen here
          updateGameLogic();
        },
        
        onDetach: () => {
          console.log('AR Session ended');
        }
      },
      
      // Three.js integration
      window.XR8.Threejs.pipelineModule(),
      
      // Tap to place
      window.XRExtras.AlmostThere.pipelineModule(),
    ]);

    // Start AR session
    window.XR8.run({ canvas: canvasRef.current });
  };

  const createTapTargets = (scene: any) => {
    const THREE = window.THREE;
    
    // Create 3 floating targets
    for (let i = 0; i < 3; i++) {
      const geometry = new THREE.SphereGeometry(0.15, 32, 32);
      const material = new THREE.MeshStandardMaterial({ 
        color: 0xff6b6b,
        emissive: 0xff0000,
        emissiveIntensity: 0.3
      });
      const target = new THREE.Mesh(geometry, material);
      
      // Random position in front of camera
      target.position.set(
        (Math.random() - 0.5) * 2,
        Math.random() * 1 + 0.5,
        -(Math.random() * 2 + 2)
      );
      
      target.userData.isTarget = true;
      target.userData.active = true;
      scene.add(target);
    }
    
    // Add lighting
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(1, 3, 2);
    scene.add(light);
    
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambientLight);
  };

  const handleTap = (event: TouchEvent) => {
    if (!isPlaying) return;
    
    const { scene, camera } = window.XR8.Threejs.xrScene();
    const THREE = window.THREE;
    
    // Raycasting for tap detection
    const touch = event.touches[0];
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const rect = canvas.getBoundingClientRect();
    const x = ((touch.clientX - rect.left) / rect.width) * 2 - 1;
    const y = -((touch.clientY - rect.top) / rect.height) * 2 + 1;
    
    const raycaster = new THREE.Raycaster();
    raycaster.setFromCamera({ x, y }, camera);
    
    // Check for target hits
    const intersects = raycaster.intersectObjects(scene.children, true);
    
    for (let intersect of intersects) {
      if (intersect.object.userData.isTarget && intersect.object.userData.active) {
        // Hit a target!
        handleTargetHit(intersect.object);
        break;
      }
    }
  };

  const handleTargetHit = (target: any) => {
    const newScore = score + 10;
    setScore(newScore);
    
    // Visual feedback
    target.userData.active = false;
    target.material.color.setHex(0x00ff00);
    
    // Animate target disappearing
    const startScale = target.scale.clone();
    const animateOut = () => {
      target.scale.multiplyScalar(0.9);
      if (target.scale.x > 0.1) {
        requestAnimationFrame(animateOut);
      } else {
        target.parent.remove(target);
        spawnNewTarget();
      }
    };
    animateOut();
    
    // Haptic feedback
    if (navigator.vibrate) {
      navigator.vibrate(50);
    }
  };

  const spawnNewTarget = () => {
    const { scene } = window.XR8.Threejs.xrScene();
    const THREE = window.THREE;
    
    const geometry = new THREE.SphereGeometry(0.15, 32, 32);
    const material = new THREE.MeshStandardMaterial({ 
      color: 0xff6b6b,
      emissive: 0xff0000,
      emissiveIntensity: 0.3
    });
    const target = new THREE.Mesh(geometry, material);
    
    target.position.set(
      (Math.random() - 0.5) * 2,
      Math.random() * 1 + 0.5,
      -(Math.random() * 2 + 2)
    );
    
    target.userData.isTarget = true;
    target.userData.active = true;
    scene.add(target);
  };

  const updateGameLogic = () => {
    if (!isPlaying) return;
    // Additional game updates if needed
  };

  const startGame = () => {
    setIsPlaying(true);
    setScore(0);
    setTimeLeft(30);
    
    // Timer
    const interval = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          clearInterval(interval);
          endGame();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
  };

  const endGame = () => {
    setIsPlaying(false);
    onScoreSubmit(score);
  };

  return (
    <div className="relative w-full h-screen bg-black">
      {/* AR Canvas */}
      <canvas
        ref={canvasRef}
        className="absolute inset-0 w-full h-full"
        style={{ touchAction: 'none' }}
      />
      
      {/* HUD Overlay */}
      <div className="absolute top-0 left-0 right-0 p-4 bg-gradient-to-b from-black/70 to-transparent pointer-events-none">
        <div className="flex justify-between items-center text-white">
          <div className="text-2xl font-bold">
            Score: {score}
          </div>
          <div className="text-2xl font-bold">
            Time: {timeLeft}s
          </div>
        </div>
        
        {zone && (
          <div className="text-sm text-white/80 mt-2">
            Zone: {zone}
          </div>
        )}
      </div>
      
      {/* Start Button */}
      {!isPlaying && xrReady && (
        <div className="absolute inset-0 flex items-center justify-center bg-black/60 pointer-events-auto">
          <button
            onClick={startGame}
            className="px-12 py-6 bg-gradient-to-r from-purple-600 to-pink-600 text-white text-2xl font-bold rounded-2xl shadow-2xl hover:scale-105 transition-transform"
          >
            Start Game
          </button>
        </div>
      )}
      
      {/* Loading State */}
      {!xrReady && (
        <div className="absolute inset-0 flex items-center justify-center bg-black">
          <div className="text-white text-center">
            <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-white mx-auto mb-4"></div>
            <p className="text-xl">Loading AR Experience...</p>
            <p className="text-sm text-white/60 mt-2">Please allow camera access</p>
          </div>
        </div>
      )}
      
      {/* Instructions */}
      {isPlaying && (
        <div className="absolute bottom-4 left-0 right-0 text-center pointer-events-none">
          <p className="text-white bg-black/50 inline-block px-6 py-2 rounded-full text-sm">
            Tap the red spheres!
          </p>
        </div>
      )}
    </div>
  );
}

// TypeScript declarations for 8th Wall
declare global {
  interface Window {
    XR8: any;
    XRExtras: any;
    THREE: any;
  }
}

// ============================================
// 4. QR CODE GENERATION IN DASHBOARD
// ============================================

// apps/web-astro/src/components/AdminEventForm.tsx
import { useState } from 'react';
import QRCode from 'qrcode';

interface QRCodeGeneratorProps {
  eventId: number;
}

export function QRCodeGenerator({ eventId }: QRCodeGeneratorProps) {
  const [zones, setZones] = useState<string[]>(['A1', 'A2', 'B1', 'B2']);
  const [qrCodes, setQrCodes] = useState<Map<string, string>>(new Map());

  const generateQRCodes = async () => {
    const baseUrl = import.meta.env.VITE_AR_BASE_URL || 'https://spectacle.app/ar';
    const codes = new Map<string, string>();

    for (const zone of zones) {
      // Generate unique URL with event ID and zone
      const arUrl = `${baseUrl}/${eventId}?zone=${zone}&t=${Date.now()}`;
      
      // Generate QR code as data URL
      const qrDataUrl = await QRCode.toDataURL(arUrl, {
        width: 512,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        },
        errorCorrectionLevel: 'H' // High error correction for better scanning
      });
      
      codes.set(zone, qrDataUrl);
    }
    
    setQrCodes(codes);
  };

  const downloadQRCode = (zone: string) => {
    const qrDataUrl = qrCodes.get(zone);
    if (!qrDataUrl) return;
    
    const link = document.createElement('a');
    link.download = `spectacle-event-${eventId}-zone-${zone}.png`;
    link.href = qrDataUrl;
    link.click();
  };

  const downloadAllQRCodes = () => {
    qrCodes.forEach((dataUrl, zone) => {
      setTimeout(() => downloadQRCode(zone), 100);
    });
  };

  const addZone = () => {
    const newZone = `Z${zones.length + 1}`;
    setZones([...zones, newZone]);
  };

  const removeZone = (zone: string) => {
    setZones(zones.filter(z => z !== zone));
    const newCodes = new Map(qrCodes);
    newCodes.delete(zone);
    setQrCodes(newCodes);
  };

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <h3 className="text-xl font-bold mb-4">QR Code Generator</h3>
      
      {/* Zone Management */}
      <div className="mb-6">
        <div className="flex justify-between items-center mb-3">
          <label className="block text-sm font-medium text-gray-700">
            Event Zones
          </label>
          <button
            onClick={addZone}
            className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700"
          >
            + Add Zone
          </button>
        </div>
        
        <div className="grid grid-cols-2 gap-2">
          {zones.map(zone => (
            <div key={zone} className="flex items-center gap-2">
              <input
                type="text"
                value={zone}
                onChange={(e) => {
                  const newZones = zones.map(z => z === zone ? e.target.value : z);
                  setZones(newZones);
                }}
                className="flex-1 px-3 py-2 border rounded"
              />
              <button
                onClick={() => removeZone(zone)}
                className="px-2 py-2 text-red-600 hover:bg-red-50 rounded"
              >
                ✕
              </button>
            </div>
          ))}
        </div>
      </div>
      
      {/* Generate Button */}
      <button
        onClick={generateQRCodes}
        className="w-full mb-6 px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white font-bold rounded-lg hover:scale-105 transition-transform"
      >
        Generate QR Codes
      </button>
      
      {/* QR Code Grid */}
      {qrCodes.size > 0 && (
        <div>
          <div className="flex justify-between items-center mb-4">
            <h4 className="font-semibold">Generated QR Codes</h4>
            <button
              onClick={downloadAllQRCodes}
              className="px-4 py-2 bg-green-600 text-white text-sm rounded hover:bg-green-700"
            >
              Download All
            </button>
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            {Array.from(qrCodes.entries()).map(([zone, dataUrl]) => (
              <div key={zone} className="border rounded-lg p-4 text-center">
                <div className="font-semibold mb-2">Zone: {zone}</div>
                <img
                  src={dataUrl}
                  alt={`QR Code for Zone ${zone}`}
                  className="w-full mb-3"
                />
                <button
                  onClick={() => downloadQRCode(zone)}
                  className="px-4 py-2 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 w-full"
                >
                  Download
                </button>
                <p className="text-xs text-gray-500 mt-2 break-all">
                  {`/ar/${eventId}?zone=${zone}`}
                </p>
              </div>
            ))}
          </div>
        </div>
      )}
      
      {/* Instructions */}
      <div className="mt-6 p-4 bg-blue-50 rounded-lg">
        <h5 className="font-semibold text-sm mb-2">📋 Instructions:</h5>
        <ol className="text-sm text-gray-700 space-y-1 list-decimal list-inside">
          <li>Add or edit zone names (e.g., "Main Stage", "VIP Lounge")</li>
          <li>Click "Generate QR Codes" to create unique URLs</li>
          <li>Download individual codes or all at once</li>
          <li>Print QR codes on matte paper (A4 or Letter size)</li>
          <li>Place codes at each zone entrance</li>
          <li>Users scan to start AR game at that location</li>
        </ol>
      </div>
    </div>
  );
}

// ============================================
// 5. UPDATED AR PAGE WITH 8TH WALL
// ============================================

// apps/web-astro/src/pages/ar/[eventId].astro
---
import ARGame8thWall from '../../components/ARGame8thWall';
import WalletConnect from '../../components/WalletConnect';

const { eventId } = Astro.params;
const zone = Astro.url.searchParams.get('zone') || undefined;
---

<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spectacle AR Experience</title>
    
    <!-- 8th Wall requires these -->
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    
    <!-- Permissions Policy for Camera -->
    <meta http-equiv="Permissions-Policy" content="camera=(self), microphone=(self)">
  </head>
  <body>
    <div id="ar-container">
      <ARGame8thWall 
        client:only="react"
        eventId={parseInt(eventId)}
        zone={zone}
        onScoreSubmit={(score) => {
          // Handle score submission to backend
          console.log('Score submitted:', score);
        }}
      />
    </div>
    
    <!-- Wallet connect overlay (shown after game) -->
    <div id="wallet-connect" style="display: none;">
      <WalletConnect client:only="react" />
    </div>
  </body>
</html>

// ============================================
// 6. PACKAGE.JSON UPDATES
// ============================================

// Add to apps/web-astro/package.json
{
  "dependencies": {
    // ... existing deps
    "qrcode": "^1.5.3",
    "@types/qrcode": "^1.5.5"
  }
}

// ============================================
// 7. DEPLOYMENT NOTES
// ============================================

/**
 * IMPORTANT: 8th Wall Requirements
 * 
 * 1. HTTPS is REQUIRED (even for dev)
 *    - Use ngrok for local testing: npx ngrok http 4321
 *    - Add the ngrok URL to 8th Wall console as allowed domain
 * 
 * 2. Add your production domain to 8th Wall console:
 *    - Go to console.8thwall.com
 *    - Project Settings → Allowed Domains
 *    - Add: your-domain.com
 * 
 * 3. Camera Permissions:
 *    - First load will ask for camera permission
 *    - Users must allow camera for AR to work
 *    - iOS Safari may require user gesture to trigger permission
 * 
 * 4. Testing:
 *    - Developer mode adds 8th Wall watermark (acceptable for demo)
 *    - Test on real devices - desktop Chrome won't work
 *    - Works on iOS Safari 11+ and Android Chrome 67+
 * 
 * 5. Performance:
 *    - Keep 3D models under 5MB
 *    - Use .glb format with Draco compression
 *    - Test on mid-range devices (iPhone 12, Pixel 4a)
 */

// ============================================
// 8. INTEGRATION WITH EXISTING FLOW
// ============================================

// Updated AR page with full claim flow
// apps/web-astro/src/pages/ar/[eventId].astro (complete version)

import ARGame8thWall from '../../components/ARGame8thWall';
import WalletConnect from '../../components/WalletConnect';
import ClaimButton from '../../components/ClaimButton';

const API_BASE_URL = import.meta.env.API_BASE_URL;

---
<script>
  let score = 0;
  let wallet = null;
  
  async function handleScoreSubmit(finalScore: number) {
    score = finalScore;
    
    // Show wallet connect
    document.getElementById('ar-container').style.display = 'none';
    document.getElementById('wallet-connect').style.display = 'block';
  }
  
  async function handleWalletConnected(address: string) {
    wallet = address;
    
    // Get signed voucher from backend
    const response = await fetch(`${API_BASE_URL}/score`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        eventId: parseInt('{eventId}'),
        wallet: address,
        score: score,
        zone: '{zone}'
      })
    });
    
    const { voucher_b64, sig_b64, points, tier } = await response.json();
    
    // Show claim UI
    document.getElementById('wallet-connect').style.display = 'none';
    document.getElementById('claim-ui').style.display = 'block';
  }
  
  // Attach to window for components to access
  window.handleScoreSubmit = handleScoreSubmit;
  window.handleWalletConnected = handleWalletConnected;
</script>

/**
 * SUCCESS! You now have:
 * 
 * ✅ 8th Wall AR experience (markerless, world tracking)
 * ✅ QR code generation from dashboard
 * ✅ Unique URLs per event/zone
 * ✅ Tap target game working on iOS + Android
 * ✅ Score submission to backend
 * ✅ Wallet connection flow
 * ✅ Blockchain claim integration
 * 
 * Next steps:
 * 1. Sign up at console.8thwall.com
 * 2. Create project and get App Key
 * 3. Add to .env: VITE_8THWALL_APP_KEY=your_key
 * 4. Run: pnpm i (install qrcode package)
 * 5. Test with ngrok: npx ngrok http 4321
 * 6. Add ngrok URL to 8th Wall console
 * 7. Open on your phone and test!
 * 
 * The QR codes will generate unique URLs like:
 * https://your-domain.com/ar/42?zone=A1
 * 
 * When users scan, they get a markerless AR experience
 * that places 3D objects anywhere (no marker needed!)
 */